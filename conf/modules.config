/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    withName: BCL2FASTQ {
        ext.args   = '--create-fastq-for-index-reads --writing-threads 6 --loading-threads 2'
        container  = 'nfcore/demultiplex:bcl2fastq-2.20.0'
        publishDir = [
            path: { "${params.outdir}/0_data_raw" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REMOVE_PRIMERS {
        ext.args   = 'ILLUMINACLIP:techseqs.fa:2:30:10'
        publishDir = [
            path: { "${params.outdir}/1_remove_primers" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SYNC_BARCODES {
        publishDir = [
            path: { "${params.outdir}/2_sync_barcodes" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME_IMPORT {
        publishDir = [
            path: { "${params.outdir}/3_demultiplex" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME_DEMUX {
        ext.args   = '--m-barcodes-column barcode-sequence --p-rev-comp-mapping-barcodes '
        publishDir = [
            path: { "${params.outdir}/3_demultiplex" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QIIME_EXPORT {
        publishDir = [
            path: { "${params.outdir}/3_demultiplex/demuxd_reads" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FILTERING {
        ext.args   = '--trimming_reads'
        ext.prefix = 's1'
        publishDir = [
            path: { "${params.outdir}/4_filter" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DADA2 {
        ext.args   = { params.tryRC ? '--tryRC' : ''}
        publishDir = [
            path: { "${params.outdir}/5_dada2" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PHYLOSEQ {
        publishDir = [
            path: { "${params.outdir}/6_phyloseq" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRONA {
        publishDir = [
            path: { "${params.outdir}/7_Krona" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
